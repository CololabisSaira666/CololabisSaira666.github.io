<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EVA</title>
      <link href="/post/642a1ded.html"/>
      <url>/post/642a1ded.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 精神世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 心的温度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试，呱呱</title>
      <link href="/post/40769f33.html"/>
      <url>/post/40769f33.html</url>
      
        <content type="html"><![CDATA[<p>整理关于Java面试时可能会问的基础问题。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Java-面向对象的特征"><a href="#Java-面向对象的特征" class="headerlink" title="Java 面向对象的特征"></a>Java 面向对象的特征</h2><p>封装：隐藏类里面的实际操作，可以重复使用</p><p>继承：增加代码复用性</p><p>多态：增强代码可以移植性，健壮性，两个类有继承关系</p><h2 id="ArrayList-和LinkedList的区别"><a href="#ArrayList-和LinkedList的区别" class="headerlink" title="ArrayList 和LinkedList的区别"></a>ArrayList 和LinkedList的区别</h2><div class="table-container"><table><thead><tr><th></th><th>时间复杂度</th><th></th></tr></thead><tbody><tr><td>ArrayList</td><td>O(1)</td><td></td></tr><tr><td>LinkedList</td><td>O(n)</td></tr></tbody></table></div><p>LinkedList:插入更快，但需要更多的内存</p><p>ArrayList：查找快，但不适用于多次增加与删除</p><h2 id="高并发中的集合有哪些问题"><a href="#高并发中的集合有哪些问题" class="headerlink" title="高并发中的集合有哪些问题"></a>高并发中的集合有哪些问题</h2><p>高并发：电梯调度？？？</p><p><strong>集合：</strong>是否线程安全</p><ul><li>安全：Vector、Hashtable（第一代，安全但是效率低下）</li><li>非安全：ArrayList、Hashmap（第二代）</li></ul><p><strong>第三代线程安全集合：</strong>关于Synchronized锁和lock锁</p><h2 id="JDK1-8的新特性"><a href="#JDK1-8的新特性" class="headerlink" title="JDK1.8的新特性"></a>JDK1.8的新特性</h2><p>接口的默认方法：Java中只有单继承</p><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><p>抽象类：更多描述抽象的概念。</p><p>接口：描述特性捏</p><h2 id="和equals的区别"><a href="#和equals的区别" class="headerlink" title="==和equals的区别"></a>==和equals的区别</h2><p>==：比较基本数据类型的数值是否相等，引用数据类型的对象是否相等。</p><p>equals：比较两个对象的类型是否相同。（注意重写）</p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p>抛出：</p><p>捕获：</p><p>声明：</p><h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><p>重载：发生在父类和子类之间</p><p>重写：方法。</p><h2 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h2><p>StringBuilder：在单线程环境下使用</p><h2 id="如何声明一个类不会被继承，不会有子类"><a href="#如何声明一个类不会被继承，不会有子类" class="headerlink" title="如何声明一个类不会被继承，不会有子类"></a>如何声明一个类不会被继承，不会有子类</h2><p>被final修饰</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>一些安全性的信息，一般情况下不能离开JVM。<strong>沙箱安全机制</strong></p><ul><li>类加载器隔离</li><li>字节码验证</li><li>安全管理器</li><li>异常处理</li><li>线程安全</li></ul><h3 id="内存溢出-内存泄漏"><a href="#内存溢出-内存泄漏" class="headerlink" title="内存溢出/内存泄漏"></a>内存溢出/内存泄漏</h3><p>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露。</p><font color = blue>a **memory leak** with Java</font><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><p>垃圾回收是 JVM 管理内存的一部分。</p><h4 id="JVM的垃圾回收算法"><a href="#JVM的垃圾回收算法" class="headerlink" title="JVM的垃圾回收算法"></a>JVM的垃圾回收算法</h4><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>将对象的状态转换为字节流的过程。<u>将对象保存到文件、数据库或通过网络传输</u>。反序列化则是将字节流恢复为对象。</p><p>在分布式系统中传输对象数据。</p><h3 id="transient-关键字"><a href="#transient-关键字" class="headerlink" title="transient 关键字"></a>transient 关键字</h3><p>transient变量不会贯穿对象的序列化和反序列化，生命周期仅存于调用者的内存中，而不会写到磁盘里进行持久化。</p><p><strong>static修饰的静态变量天然就是不可序列化的。</strong></p><p>序列化保存的是对象状态，静态变量保存的是类状态。</p><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h1 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>仅保留字母、数字、特殊字符等</strong></p><p>replaceAll(“[\^a-zA-Z]”, “”)；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;测 试 WG23-D&quot;</span>;</span><br><span class="line">    <span class="comment">// 只留字母</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;[^a-zA-Z]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 只留数字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;[^0-9]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">// 只留中文</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;[^\u4e00-\u9fa5]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;s1 = &quot;</span> + s1); <span class="comment">// WGD</span></span><br><span class="line">    System.out.println(<span class="string">&quot;s2 = &quot;</span> + s2); <span class="comment">// 23</span></span><br><span class="line">    System.out.println(<span class="string">&quot;s3 = &quot;</span> + s3); <span class="comment">// 测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>在算法题需要自己处理输入输出的时候还是挺重要的，参考链接：<a href="https://blog.csdn.net/WB18002337539/article/details/119486489">https://blog.csdn.net/WB18002337539/article/details/119486489</a></p><h2 id="双端队列Deque"><a href="#双端队列Deque" class="headerlink" title="双端队列Deque"></a>双端队列Deque</h2><p>熟悉一下这个类，双端的，与stack对比。</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>Brian Kernighan 算法</p><h2 id="Arrays-sort-的三种常用用法"><a href="#Arrays-sort-的三种常用用法" class="headerlink" title="Arrays.sort()的三种常用用法"></a>Arrays.sort()的三种常用用法</h2><p><strong>Arrays.sort(int[] a)</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">  <span class="type">int</span>[] a = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    Arrays.sort(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i ++) &#123;</span><br><span class="line">         System.out.print(a[i] + <span class="string">&quot; &quot;</span>); <span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Arrays.sort(int[] a, int fromIndex, int toIndex)</strong>: 这种形式是对数组部分排序，也就是对数组a的下标从fromIndex到toIndex-1的元素排序，注意：下标为toIndex的元素不参与排序哦！</p><p><strong>实现降序排列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="comment">//不能使用基本数据类型</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">54</span>,<span class="number">21</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">//降序</span></span><br><span class="line">        Arrays.sort(arr, (a, b) -&gt; &#123;</span><br><span class="line">            <span class="comment">//返回值&gt;0交换</span></span><br><span class="line">            <span class="keyword">return</span> b-a;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        findKthLargest(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        quickSort(nums, <span class="number">0</span>, length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> getPos(array, l, r);</span><br><span class="line">            quickSort(array, l, pos-<span class="number">1</span>);</span><br><span class="line">            quickSort(array, pos+<span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPos</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag_num</span> <span class="operator">=</span> array[r];</span><br><span class="line">        <span class="type">int</span> <span class="variable">point</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt; r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt;= flag_num) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">                array[i] = array[point];</span><br><span class="line">                array[point] = temp;</span><br><span class="line">                point++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[point];</span><br><span class="line">        array[point] = array[r];</span><br><span class="line">        array[r] = temp;</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PriorityQueue（Java优先级队列）"><a href="#PriorityQueue（Java优先级队列）" class="headerlink" title="PriorityQueue（Java优先级队列）"></a>PriorityQueue（Java优先级队列）</h2><p>关于实现大小堆</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学些有趣的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网总览</title>
      <link href="/post/949a30b6.html"/>
      <url>/post/949a30b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>为上层协议提供了一个传输数据的可靠的物理媒体，物理层确保原始的数据可在各种物理媒体上传输。</p><h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><p>确定与传输介质的接口的一些特性（==完成比特流传输==）。</p><p>涉及的四个特性：</p><ul><li>机械：</li><li>电气：接口电缆电压范围</li><li>功能：电压表示何种含义</li><li>过程：各种可能事件的出现顺序</li></ul><h2 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><ul><li>通信目的为<strong>传送消息</strong>，<strong>消息（文字、图片等）的实体是数据</strong></li><li>信号：数据的电气或电磁表现，分<u>模拟信号</u>与<u>数字信号</u></li><li>码元：不同离散数值的基本波形<ul><li>码元速率：单位时间内通过信道的码元数，波特</li><li>数据速率：单位时间内通过信道的信息量（比特数），b/s或bps</li></ul></li><li>单向通信：只有一个方向</li><li>半双工：双发均可发送，但不能同时</li><li>全双工：双方可以同时发送和接收（需要两条信道，通信效率最高）</li><li>基带信号：来自信源，分为数字基带和模拟基带，属于原始信号，需要<strong>调制</strong>。调制：用模拟信号承载数字或模拟数据</li><li>带通信号：基带信号载波调制后</li><li>调幅 AM</li><li>调频 FM</li><li>调相 PM</li><li><strong>编码：数字信号承载数字或模拟数据</strong></li><li></li></ul><h3 id="常见编码方式"><a href="#常见编码方式" class="headerlink" title="常见编码方式"></a>常见编码方式</h3><p>p21</p><p>数字数据编码为数字信号：</p><ul><li>不归0</li><li>归0</li><li>曼彻斯特编码</li><li>差分曼彻斯特编码</li></ul><p>模拟信号编码为数字信号：即PCM，包括采样、量化和编码</p><ul><li>采样：==奈奎斯特定理==，两倍采样频率与原频率</li><li>量化</li><li>编码</li></ul><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><p>信号失真：码元传播速率越高，或信号传输距离越远，越严重。</p><p>数据传输定理：</p><div class="table-container"><table><thead><tr><th>名称</th><th>公式</th><th>作用</th><th>补充说明</th></tr></thead><tbody><tr><td>奈奎斯特定理</td><td>理想低通信道最大数据传输率 = $2W log_2 V$</td><td>p26</td><td></td></tr><tr><td>香农定理</td><td>信道的理想数据传输效率 =  $W log_2 (1 + S/N)$</td><td>p27</td><td>信噪比越大，数据传送速率越高</td></tr></tbody></table></div><h2 id="物理层的传输介质"><a href="#物理层的传输介质" class="headerlink" title="物理层的传输介质"></a>物理层的传输介质</h2><p>引导型传输介质：</p><ul><li>光纤：</li><li>双绞线：</li><li>同轴电缆：</li></ul><p>非引导型传输介质：</p><ul><li>无线电波：</li><li>微波、红外线和激光：</li></ul><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>关于同一个局域网内的分组转发问题，不经过路由器转发。</p><p>数据链路有必要的通信协议，用来控制数据传输。</p><h2 id="数据链路层功能和设计要点"><a href="#数据链路层功能和设计要点" class="headerlink" title="数据链路层功能和设计要点"></a>数据链路层功能和设计要点</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>实现<strong>帧</strong>的传输。</p><p>数据链路层使用的信道类型：</p><ul><li>点对点：一对一</li><li>广播：一对多</li></ul><p><strong>数据链路层为网络层提供的服务:</strong></p><div class="table-container"><table><thead><tr><th>名称</th><th>详情</th></tr></thead><tbody><tr><td>无确认的无连接</td><td>发送数据帧前无需建立链路连接，也无需发回确认，适用于，以太网</td></tr><tr><td>有确认的无连接</td><td>发送数据帧前无需建立链路连接，必须发回确认，适用于，无线通信</td></tr><tr><td>有确认的面向连接</td><td>需要：建立数据链路，传输帧，释放数据链路，可靠性最高</td></tr></tbody></table></div><p><strong><font color = green>思考问题：</font></strong></p><ul><li>以太网与无线通信的区别</li><li>以太网一定需要网线连接吗</li></ul><h3 id="组帧方法与透明传输"><a href="#组帧方法与透明传输" class="headerlink" title="组帧方法与透明传输"></a>组帧方法与透明传输</h3><p>出错时只重发出错的帧，不必完全重发，提高效率。</p><p>帧的数据部分：网络层的IP数据报。发送方根据一定的规则，将网络层递交的分组封装成帧，组帧主要解决帧定界、帧同步、透明传输等问题。</p><font color = purple>组帧方法：</font><div class="table-container"><table><thead><tr><th>方法</th><th>如何做</th></tr></thead><tbody><tr><td>字符计数法</td><td>帧头部使用计数字段</td></tr><tr><td>字符填充的首尾界定法</td><td>使用特定字符作为帧的开始与结束</td></tr><tr><td>比特填充的首尾界定法</td><td>连续的1后面插入0</td></tr><tr><td>违规编码法</td><td>规定电平对，借助违规编码序列界定帧的起始与终止</td></tr></tbody></table></div><h2 id="错误检测和纠正"><a href="#错误检测和纠正" class="headerlink" title="错误检测和纠正"></a>错误检测和纠正</h2><p>差错控制分为：<strong>自动重传请求-ARQ</strong>、<strong>前向纠错-FEC</strong>。</p><p>检错编码：</p><ul><li>奇偶校验码：</li><li>循环冗余码CRC：<strong>计算方法！</strong></li></ul><p>纠错编码：</p><ul><li>海明编码：   </li></ul><h2 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h2><p>无限制单工协议</p><p>单工停-等协议</p><p>有噪声信道的单工协议（自动重传ARQ）</p><h2 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h2><p>窗口大小在传输时固定。</p><ul><li>停止-等待：收到确认回复前不能发送其他数据帧</li><li>后退N帧：接收方只允许按顺序接受帧</li><li>选择重传：允许先接收不连续的序号，只重传错误数据帧</li></ul><h2 id="PPP"><a href="#PPP" class="headerlink" title="PPP"></a>PPP</h2><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h3 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h3><p>可靠性负责?</p><p><strong>面向连接的服务，虚电路</strong>：先建立连接，预留资源。</p><p><strong>无连接服务，数据报</strong>：实际中，网络层向上提供<strong>简单灵活，无连接的、尽最大努力交付的</strong>数据报服务。发送的分组要包括发送端和接收端的完整地址，以便进行独立传输。<font color = blue>当出现故障时可以更新转发表。</font></p><p><strong>虚电路与数据报服务的对比表。</strong></p><p><img src="https://miaomiao-1-1319022947.cos.ap-beijing.myqcloud.com/202405312120.jpg" alt="202405312120" style="zoom:60%;" /></p><h3 id="网络层功能"><a href="#网络层功能" class="headerlink" title="网络层功能"></a>网络层功能</h3><p><strong><font color = red>异构网络互联</font></strong></p><p>网络互联通常指：路由器进行网络互联和路由选择。</p><div class="table-container"><table><thead><tr><th style="text-align:center">中继系统层次</th><th style="text-align:center">具体名称</th></tr></thead><tbody><tr><td style="text-align:center">物理层</td><td style="text-align:center">中继器、集线器</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">网桥或交换机</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">路由器</td></tr><tr><td style="text-align:center">网络层以上层次</td><td style="text-align:center">网关</td></tr></tbody></table></div><p><strong><font color = red>路由与转发</font></strong></p><p><strong>路由选择：</strong>按照分布式算法，动态选择路由，确定转发分组的路径。</p><p><strong>分组转发：</strong>根据转发表，将用户的IP数据报从合适端口转发。</p><p><strong><font color = red>拥塞控制</font></strong></p><p><strong>开环控制：</strong>静态预防，决定时不考虑此刻网络状况。</p><p><strong>闭环控制：</strong>检测到网络发生阻塞后再调整。</p><h2 id="IPV4"><a href="#IPV4" class="headerlink" title="IPV4"></a>IPV4</h2><h3 id="IPV4基本知识"><a href="#IPV4基本知识" class="headerlink" title="IPV4基本知识"></a>IPV4基本知识</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>与IP协议，非可靠投递，与其配套使用的还有：</p><ul><li>ARP：地址解析协议（被IP协议使用）</li><li>ICMP：网络控制报文协议</li><li>IGMP：网际组管理协议</li></ul><h4 id="分组格式"><a href="#分组格式" class="headerlink" title="分组格式"></a>分组格式</h4><p>一个IP数据报由首部和数据两部分组成。首部固定长度，20字节。首部的固定部分后面是可选字段，具体含义如下：</p><div class="table-container"><table><thead><tr><th>字段</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td>生存时间TTL</td><td style="text-align:left">数据报在网络中可通过路由器数的最大值。路由器转发分组前先减1，TTL为0时丢弃分组。</td></tr><tr><td>协议</td><td style="text-align:left">占8位。值为6，TCP；值为17，UDP。</td></tr></tbody></table></div><h4 id="IP数据报分片"><a href="#IP数据报分片" class="headerlink" title="IP数据报分片"></a>IP数据报分片</h4><p>链路层的最大传送单元MTU严格限制IP数据报的长度，有时需要将IP分片。<code>片在目的地网络层被重新组装。</code></p><p>==分片的计算：偏移值等。==关于偏移值的计算，为之前的有效数据/8（注意，这里“/8”的原因为，偏移值的单位是8字节）。</p><h4 id="IP层分组转发过程"><a href="#IP层分组转发过程" class="headerlink" title="IP层分组转发过程"></a>IP层分组转发过程</h4><ul><li>数据报首部提取目的主机IP地址A，得目的网络地址N；</li><li></li></ul><h3 id="IPV4地址与NAT"><a href="#IPV4地址与NAT" class="headerlink" title="IPV4地址与NAT"></a>IPV4地址与NAT</h3><p>网络号与主机号，分为A、B、C类单播地址，为0，10，110；D类组播、E类保留之后使用。</p><p>表示特殊用途的IP：主号全为0为网络本身，主号全为1为本网络的广播地址，127.0.0.0保留作为环路自检地址。<strong>IP地址的指派范围（p126）。</strong></p><p>路由器根据目的主机连接的网络号来转发分组，IP地址标志一台主机（路由器）和一条链路的接口。</p><p><strong><font color = red>网络地址转换NAT</font>：</strong>将专用网络地址转为公用地址，隐藏内部网络结构。NAT可以将私有IP地址转化为合法的全球IP地址。</p><h3 id="划分子网与构造超网"><a href="#划分子网与构造超网" class="headerlink" title="划分子网与构造超网"></a>划分子网与构造超网</h3><h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><ul><li><p>传输层功能与提供的服务</p></li><li><p>UDP协议</p></li><li><p>TCP协议</p></li></ul><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学些有趣的 </tag>
            
            <tag> 课程收获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Spring Boot</title>
      <link href="/post/da8c2e9e.html"/>
      <url>/post/da8c2e9e.html</url>
      
        <content type="html"><![CDATA[<p>主要参考视频：<a href="https://www.bilibili.com/video/BV1gm411m7i6/?share_source=copy_web&amp;vd_source=23f587301dbedf5d4b482ef5b1d05bf4">https://www.bilibili.com/video/BV1gm411m7i6/?share_source=copy_web&amp;vd_source=23f587301dbedf5d4b482ef5b1d05bf4</a></p><p>其他资料：互联网，ChatGPT</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><ul><li>管理各种jar包</li><li>构建项目</li></ul><h2 id="Java-组件化-gradle"><a href="#Java-组件化-gradle" class="headerlink" title="Java-组件化-gradle"></a>Java-组件化-gradle</h2><p><a href="https://www.cnblogs.com/Im-Victor/p/10901528.html">https://www.cnblogs.com/Im-Victor/p/10901528.html</a></p><p>组件化可以分别打包，不必注释掉其他类的代码。</p><p>组件化步骤：</p><ul><li>创建module，将代码放到各个module中</li><li>setting.gradle 添加module</li><li>依赖分开管理</li></ul><h1 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h1><p>初始化：使用pom.xml打开并创建项目（新建/跑已有的项目）。这里pom中写入相关依赖与配置，如是否有数据库。</p><p>运行：</p><p>查看：浏览器查看，注意端口为8080</p><h2 id="http动词"><a href="#http动词" class="headerlink" title="http动词"></a>http动词</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping</span><br></pre></td></tr></table></figure><ul><li>GET：取出资源（单个或多个）</li><li>POST：新建资源</li><li>PUT：更新资源（客户端提供改变后的完整资源）</li><li>PATCH：在服务器更新(更新)资源（客户端提供改变的属性，比如说某个字段+1）</li><li>DELETE：从服务器删除资源</li></ul><p>这里的<code>getmapping</code>大概使用了第1个？</p><h2 id="bean"><a href="#bean" class="headerlink" title="bean"></a>bean</h2><p> 构成应用程序主干并由Spring IoC容器管理的对象称为bean。</p><p>JpaRepository接口同时拥有基本<code>CRUD</code>功能以及分页功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">druid包</span><br></pre></td></tr></table></figure><p>通常指的是 <a href="https://github.com/alibaba/druid">Alibaba Druid</a>，这是一个高性能、功能强大的数据库连接池库。在 Spring Boot 项目中，<code>druid</code> 包可能包含与 Druid 数据库连接池相关的配置和管理类。</p><p><strong>spring-bean 里注册 druid 的datasource：</strong>添加 Druid 依赖；配置 Druid DataSource；注册 Druid DataSource 为 Spring Bean。</p><h2 id="……"><a href="#……" class="headerlink" title="@……"></a>@……</h2><p><strong><font color = blue>为什么要使用@……</font></strong></p><p><u>个人回答：</u>让 Spring 框架自动发现和管理这些类，并将它们注册为 Spring 容器中的一个 bean，吗？</p><p>以下为GPT的回答。</p><hr><p><img src="https://miaomiao-1-1319022947.cos.ap-beijing.myqcloud.com/image-20240731134701829.png" alt=""></p><ol><li><strong>组件扫描和注册 Bean</strong><ul><li><code>@Component</code>：通用的组件注解，表示类是一个 Spring 组件，会被自动扫描和注册为 bean。</li><li><code>@Service</code>：特定于服务层的注解，表示类是一个服务组件。</li><li><code>@Repository</code>：特定于数据访问层的注解，表示类是一个数据仓库组件，通常与持久化框架如 JPA 一起使用。</li><li><code>@Controller</code>：特定于 Spring MVC 的注解，表示类是一个控制器组件，用于处理 HTTP 请求。</li></ul></li><li><strong>配置和管理 Bean</strong><ul><li><code>@Bean</code>：用于方法上，表示该方法的返回值是一个 bean，通常用于 Java 配置类中。</li><li><code>@Configuration</code>：用于标记配置类，表示该类包含了一个或多个 <code>@Bean</code> 方法，并且可以被 Spring 容器作为 bean 的定义源。</li></ul></li><li><strong>依赖注入</strong><ul><li><code>@Autowired</code>：用于自动注入依赖，Spring 会自动满足被标记字段、构造函数或方法的依赖。</li><li><code>@Qualifier</code>：与 <code>@Autowired</code> 一起使用，用于在有多个同类型的 bean 时，指定要注入的具体 bean。</li><li><code>@Inject</code>：JSR-330 标准注解，类似于 <code>@Autowired</code>。</li></ul></li><li><strong>生命周期管理</strong><ul><li><code>@PostConstruct</code>：用于标记方法，表示该方法应在依赖注入完成后立即调用。</li><li><code>@PreDestroy</code>：用于标记方法，表示该方法应在容器销毁 bean 之前调用。</li></ul></li><li><strong>事务管理</strong><ul><li><code>@Transactional</code>：用于类或方法上，表示该类或方法应该在事务上下文中执行。</li></ul></li><li><strong>切面编程</strong><ul><li><code>@Aspect</code>：用于标记切面类，定义横切关注点。</li><li><code>@Before</code>、<code>@After</code>、<code>@Around</code> 等：用于定义切入点方法，表示在目标方法执行前、执行后或包围目标方法执行的逻辑。</li></ul></li><li><strong>MVC 和 Web</strong><ul><li><code>@RequestMapping</code>：用于方法或类上，映射 HTTP 请求到处理方法。</li><li><code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code> 等：特定于 HTTP 方法的请求映射。</li><li><code>@RestController</code>：组合了 <code>@Controller</code> 和 <code>@ResponseBody</code>，用于创建 RESTful web 服务。</li></ul></li></ol><p>这些注解的使用帮助开发者以声明的方式配置和管理 Spring 应用程序的组件、依赖和行为，大大简化了开发过程中的配置工作，同时提高了代码的可读性和维护性。</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RestController </span><br></pre></td></tr></table></figure><p>注解，用于将 Java 类转换为 RESTful API 控制器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br></pre></td></tr></table></figure><p>关于DB的接口？做数据库操作的最底层的抽象接口。标记后将此类作为spring bean放在spring容器中操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ApiModelProperty</span><br><span class="line">  value：字段说明 </span><br></pre></td></tr></table></figure><p>用于方法，字段； 表示对model属性的说明或者数据操作更改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br></pre></td></tr></table></figure><p>配合接口等使用，解耦？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ApiOperation </span><br></pre></td></tr></table></figure><p><img src="https://miaomiao-1-1319022947.cos.ap-beijing.myqcloud.com/image-20240801144442539.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br></pre></td></tr></table></figure><h2 id="pom-xml文件"><a href="#pom-xml文件" class="headerlink" title="pom.xml文件"></a>pom.xml文件</h2><p><groupId>   存储的包的路径</p><p><artifactId>   模块名</p><p><version>   声明版本号</p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>似乎是，不需要配置复杂的环境，仅需在pom文件中写入相关依赖的信息。</p><p>分析项目中的依赖关系和配置，自动化地配置Spring应用程序的Bean。</p><h2 id="项目层次"><a href="#项目层次" class="headerlink" title="项目层次"></a>项目层次</h2><p>前端：</p><ul><li>客户端/浏览器</li></ul><p>后端：</p><ul><li><p>API</p></li><li><p>service 层</p></li><li><p>data access 层</p></li><li>数据库</li></ul><h3 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h3><h4 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a><strong>数据库：</strong></h4><p>自行创建-mysql</p><p>数据库表主键何时使用自增长：直接自增（@GeneratedValue），<font color = red>雪花算法，分布式数据库id自增</font></p><h4 id="data-access层："><a href="#data-access层：" class="headerlink" title="data access层："></a><strong>data access层：</strong></h4><ol><li>pom补充相关依赖</li><li>reload</li><li>新增package-dao</li><li>新增接口，里面有注解@Repository，这里有<a href="#first_link"><code>extends JpaRepository</code></a>。把数据库表映射到对象中。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br></pre></td></tr></table></figure><p>创建自增组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Column(name=&quot;填数据库对应的列名？&quot;)</span><br><span class="line">@TableFiled(&quot;....&quot;)</span><br></pre></td></tr></table></figure><p>将数据库中的字段映射。</p><p><code>@Column,@Table注解是JPA提供的，而@TableField，@TableName注解是MyBatis Plus提供的。</code></p><h4 id="service-层："><a href="#service-层：" class="headerlink" title="service 层："></a>service 层：</h4><p>分为：</p><ul><li>接口</li><li>impl</li></ul><h2 id="sql注入检测"><a href="#sql注入检测" class="headerlink" title="sql注入检测"></a>sql注入检测</h2><h1 id="Spring-Cloud-的服务发现框架——Eureka"><a href="#Spring-Cloud-的服务发现框架——Eureka" class="headerlink" title="Spring Cloud 的服务发现框架——Eureka"></a>Spring Cloud 的服务发现框架——Eureka</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学些有趣的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OO总结</title>
      <link href="/post/5ecef886.html"/>
      <url>/post/5ecef886.html</url>
      
        <content type="html"><![CDATA[<p>这是本人的2024年OO课程总结，我是北航6系的一个普通学生，编码水平一般，仅以普通生身份评价OO课程。</p><p>首先，2023年春我第一次选OO，由于本人此前未选过OOpre，且无Java编程经验，首次作业完全不会做。不是很愿意回忆第一次上课的情景，总之就是非常差劲。</p><p>本学期的OO，我究竟学到了什么？我也不知道，或许还不如多去练习算法与面试题。也罢，都过去了。</p><h1 id="第一单元"><a href="#第一单元" class="headerlink" title="第一单元"></a>第一单元</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>第一单元主任务：单变量多项式的括号展开。</p><p>在hw1中，仅需将一个包含+、-、*、^以及括号（单层）的单变量表达式，输出展开所有括号的结果。</p><p>hw2新增了多层括号，自定义函数因子和指数函数因子。</p><p>hw3新增求导算子。</p><h2 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h2><h3 id="hw1"><a href="#hw1" class="headerlink" title="hw1"></a>hw1</h3><p>采用了递归下降法。一个表达式可以拆分成若干项（由+、-符号连接），因子可以分为表达式因子，数字和幂函数。在完全化简后，表达式由若干以下项构成。</p><script type="math/tex; mode=display">c*x^n</script><p>我的主要思路是，先解析表达式，再利用基本项的性质运算，最后输出。</p><p>Factor接口下的类是递归下降方法的核心。Power类存储形如$c*x^n$的项，Poly类负责运算工作。</p><p>Poly类的基本复杂度较高，大概是因为我将全部的运算，以及部分输出表达式工作写在了Poly里。</p><h3 id="hw2"><a href="#hw2" class="headerlink" title="hw2"></a>hw2</h3><p>在第一次作业的基础上，新增了自定义函数类。对于输入表达式中的的自定义函数，采取带入实参替换的方式预处理。修改Power类的定义，用hashmap存储exp。修改Poly类，新增有关exp的运算。</p><p>需要注意，在替换时处理exp与x的关系，以及先将形参替换成其他字母，再替换实参。复杂度问题与hw1类似。</p><h3 id="hw3"><a href="#hw3" class="headerlink" title="hw3"></a>hw3</h3><p>新增求导算子。这部分需要注意的问题是：dx可以多次出现，以及正确使用链式法则。我最大的问题是，把求导方法也写进了power类里，而没有采用类似第二次上机的架构，即递归实现求导功能。类复杂度图也能反映出这个问题。</p><h2 id="bug们"><a href="#bug们" class="headerlink" title="bug们"></a>bug们</h2><p>三次作业在强测和互测中均没有出现bug。</p><p>自己测出来/跑评测机发现的bug如下：</p><ul><li><p>hw1：因为没有仔细分析形式化表述，未考虑形如$x^{+1}$的情况。</p></li><li><p>hw2：在输出exp时是否要格外加括号的判定问题。</p></li><li><p>hw3：一开始没有注意到，dx可以多次出现。</p></li></ul><p>互测：</p><ul><li><p>hw1：同房的一位同学在处理输出结果时的bug，如果末位项为1，会无法输出1。</p></li><li><p>hw2与hw3：没有hack到。</p></li></ul><h2 id="不存在的优化"><a href="#不存在的优化" class="headerlink" title="不存在的优化"></a>不存在的优化</h2><p><strong>hw1：</strong>需要优化的部分是，尽量不让首项为负。如x-1优于-1+x。</p><p><strong>hw2：</strong>比较容易想到和实现的是，输出exp时判断是否需要格外加括号。比较复杂的是指数函数的优化。看了评论区的优化方法，但因为能力有限，且考虑到可能的bug，选择正确性优先。这也导致后两次作业性能分惨淡。</p><p><strong>hw3：</strong>未考虑。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一单元有惊无险结束，非常感谢助教、开发评测机的同学、以及hw2与我交流相同测试点问题的同学们。希望我在下一单元的多线程学习中有更多收获。</p><h1 id="第二单元"><a href="#第二单元" class="headerlink" title="第二单元"></a>第二单元</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><p><strong>第二单元主任务：模拟多线程实时电梯系统。</strong></p><p>hw1：楼座内有6部电梯，接收乘客请求，并合理调度将其送到目的地。请求中包括乘客期待进入的电梯，电梯需要实时反馈运行情况（移动、开关门、乘客进出）。</p><p>hw2：新增电梯重置请求，电梯重置时可以改变最大容量和移动时间；乘客请求中不再添加电梯id，由调度器分配；电梯移动接乘客前需发receive指令，否则视为非法移动。</p><p>hw3：新增电梯重置为双轿厢请求，双轿厢电梯可以设置换成层。</p><h2 id="代码架构-1"><a href="#代码架构-1" class="headerlink" title="代码架构"></a>代码架构</h2><p>三次作业中，我创建多线程的方法均为：声明一个Thread类的子类，在子类中重写Thread类的run方法。</p><p>均使用了synchronized关键字修饰方法，未使用其他类型的锁。</p><h3 id="hw1-1"><a href="#hw1-1" class="headerlink" title="hw1"></a>hw1</h3><p>分析题目后，我设计的电梯系统运行逻辑如下：每部电梯有一个等候队列和轿厢内队列。等候队列存储”期望上这部电梯，但还没乘上“的乘客请求，轿厢内队列存储”已在轿厢内“的乘客需求。初始时刻，电梯停在一层，默认移动方向向上，若等候队列暂时没有乘客请求，且电梯内也没有乘客，该线程会wait，直到有新请求时被唤醒。若电梯在移动中，在每一层会检测乘客状态，检测是否有乘客需要进出电梯，若有，则当前层开门，若无，则继续前往下一层。电梯若有开门动作，先检测电梯内是否有乘客离开，若电梯还有空位，会依次让本层的等待乘客上电梯。电梯在到达最底层或最高层后，改变运行方向；或电梯沿当前运行方向无法到达等候乘客所在层，且电梯内无乘客，也会改变运行方向。</p><p>在讨论中，有同学提到了如下场景：电梯在某层接到乘客，在乘客关门后，电梯开始前往下一楼层时，突然该层到达了大量请求，电梯是否需要折返接人（以争取更短的总运行时间）。根据实际生活经验，电梯应该继续沿原路线运行，不能为了优化（一些情况下有可能用时更短）而放弃更符合认知逻辑的调度策略是不正确的。</p><p>电梯的等待队列，即Request中用到了锁，调度器向电梯分配请求，以及电梯查看请求过程中涉及线程交互。</p><p>Elevator类的基本复杂度较高，大概是因为我将电梯的运行控制（方向、开关门等）写在了一起。</p><h3 id="hw2-1"><a href="#hw2-1" class="headerlink" title="hw2"></a>hw2</h3><p>在第一次作业的基础上，新增电梯重置请求，电梯重置时可以改变最大容量和移动时间；乘客请求中不再添加电梯id，由调度器分配；电梯移动接乘客前需发receive指令，否则视为非法移动。程序的基本架构未改变。</p><p>需要注意，本次乘客不指定乘坐某部电梯。经过思考与尝试，我认为新的调度器有两种解决方法：1.输入请求，查看6部电梯哪一部能最快接到该乘客（通过乘客所在楼层，6部电梯是否满载、楼层与运行方向确定），优点是在乘客依次到来时，能够尽量减少每位乘客的等待时间，但需要合理化调度策略，避免出错（如乘客数较多时，一些乘客可能无法被接上）。2.随机策略，通过随机生成电梯id的方法为乘客选择搭乘电梯，优点为，当大批乘客迅速到来时，随机分配时可能会拥有更好的性能，缺点为乘客请求数较少时，随即策略可能会导致一台电梯频繁工作。</p><p>电梯重置时，要锁住等待队列，使其无法被加入新请求。</p><p>同样的，Elevator类的基本复杂度较高。</p><h3 id="hw3-1"><a href="#hw3-1" class="headerlink" title="hw3"></a>hw3</h3><p>双轿厢调度问题。在本次作业中，我采取了一个电梯分裂为两个电梯的策略，而非在程序开始时设置12个电梯线程，按需获取。本方法的优点是方便debug，缺点是牺牲了性能，策略非最优。</p><h2 id="bug们-1"><a href="#bug们-1" class="headerlink" title="bug们"></a>bug们</h2><h3 id="hw1-2"><a href="#hw1-2" class="headerlink" title="hw1"></a>hw1</h3><p>注意边界条件判定，电梯一开始会前往0或12层。</p><h3 id="hw2-2"><a href="#hw2-2" class="headerlink" title="hw2"></a>hw2</h3><p>在大量乘客在同一时间到来时，可能出现乘客进入电梯后才receive的情况（不太容易复现）。</p><h3 id="hw3-2"><a href="#hw3-2" class="headerlink" title="hw3"></a>hw3</h3><p>A、B轿厢在换乘楼层相撞。解决方法为，双轿厢电梯都不会在换乘层停留，在换层接到或放下乘客后会立刻离开。</p><p>电梯被重置为双轿厢后，未开始重置，却发出receive-A/B的指令。检查后发现，此时电梯等待队列未锁住，还可以添加请求。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><strong>线程安全：</strong>共享。本次作业中，涉及线程安全的部分为请求。调度器需要拿取请求分配给合适的线程，调度器的某些行为也要依靠线程反馈，关键是处理好他们的共享变量。保证线程安全的方法是使用synchronized（自动锁，锁的创建和释放都是自动的）、或者使用锁（lock，手动指定锁的创建和释放），或者用volatile关键字。本单元中只使用了第一种，在使用过程中要注意范围，避免不必要的性能消耗。</p><p><strong>层次化设计：</strong>Elevator类仅处理电梯运行逻辑，不要夹杂调度模块。应该分为接收请求、分配请求、执行请求三个部分，使代码有较高的可读性和逻辑性。可采用生产者-消费者模式。</p><p>其他：第二单元结束，我和我愚蠢的电梯顺利通过三次强测。虽说三次强测都没有bug，勉强通过，但我明白，这是架构与程序可读性换来的，写最后一次作业时，我在迭代时能明显感觉到代码可读性变差。我还需要提升代码能力，在完成任务的基础上写出更好的代码。第三单元，预启动。</p><h1 id="第三单元"><a href="#第三单元" class="headerlink" title="第三单元"></a>第三单元</h1><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><p><strong>黑箱测试：</strong>也称功能测试，通过测试来检测每个功能是否都能正常使用。 在测试中，在完全不考虑程序内部结构和内部特性的情况下，在程序接口处进行测试。黑箱测试只检查程序功能是否符合需求规格说明书。</p><p><strong>白箱测试：</strong>又称为结构测试或逻辑驱动测试，它是把测试对象看成一个透明的盒子。测试人员需要利用程序内部的逻辑结构设计测试用例，对程序所有逻辑路径进行测试。白箱测试分为：静态测试方法、动态测试方法。</p><p><strong>单元测试：</strong>对软件中的最小可测试部分，如单个函数或方法进行验证和测试。每个测试只关注一个特定的单元，不依赖于系统其他部分的状态。</p><p><strong>功能测试：</strong>验证软件应用或系统的功能是否符合需求规格说明书或用户需求。功能测试的目的是：确保软件的每个功能都正常工作，并且满足用户的需求。测试人员会从用户的角度出发，模拟用户操作来验证软件的每个功能。</p><p><strong>集成测试：</strong>发生在单元测试之后，目的是检查软件组件或模块在合并后作为一个整体时是否能够正常工作。集成测试确保各个组件之间的接口和交互能够按预期工作，并且整个系统作为一个协调一致的单元运行。</p><p><strong>压力测试：</strong>评估软件在高负载或极端条件下的性能表现。目的是识别软件在极限工作条件下的瓶颈、稳定性问题以及可能的失败点。压力测试有助于提高软件的可靠性和用户满意度。</p><p><strong>回归测试：</strong>验证软件在经过修改、更新或维护后，原有功能仍然按照预期工作，并且新引入的更改没有引入新的错误。回归测试是确保软件质量的重要环节。</p><p><strong>数据构造策略：</strong></p><ul><li>手动构造：根据每个方法的JML规格，构造指令数较少但覆盖全面的测试数据，在构造时也需要构造边界数据。例如，作业说明书中要求<code>−1000≤social*_*value≤1000</code>，方法的JML中限制了正常情况下<code>tag.size()</code>的范围。手动构造的数据可以确保触发方法的每个分支（正常与异常情况），实现白箱测试。</li><li>随机生成：可以借助Random类生成随机数据，或使用DPO评测机。</li></ul><p>上述两种数据构造策略需同时采用，才能达到更好的测试效果。</p><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>本单元作业通过JML定义社交网络的基本功能规格，我们需要阅读JML，分析此社交网络，编写代码对其中的用户和他们之间的关系进行管理。我们需要在实现基础功能的前提下，利用不同的数据结构与算法对架构进行优化。</p><p><strong>hw9</strong></p><p>例如，本次作业中社交网络可以抽象为图论问题，在查找连通块时，可以通过维护并查集提高效率（需要在官方方法的基础上，设计辅助方法完成并查集，后文的bfs等同理）。在数据结构方面，虽然JML均采取数组表述，实际代码为了提升运行效率，会采取hashmap维护数据。</p><p><strong>hw10</strong></p><ul><li><p>在计算最短路径时，采取bfs算法提高效率。</p></li><li><p>getAgeMean()，ageSum在addPerson与delPerson时进行维护，提高效率。</p></li><li><p>getBestId()，bestId需要在新增、修改或删除Acquaintance进行维护。</p></li></ul><p><strong>hw11</strong></p><p>新增了Message等类，原有的Tag，Person与Network里的方法无变化，仅需要考虑新增的情况。</p><h2 id="性能问题及其修复"><a href="#性能问题及其修复" class="headerlink" title="性能问题及其修复"></a>性能问题及其修复</h2><p>超时问题，即在数据量过多，或重复指令操作时，若完全按照JML规格进行实现，评测会出现超时。在设计时需要将必要数据缓存，调用相关方法时直接返回答案。</p><p>这里写我的bug之一，如，queryTagValueSum指令时，若采取如下写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer id1 : persons.keySet()) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Integer id2 : persons.keySet()) &#123;</span><br><span class="line">        res += persons.get(id1).queryValue(persons.get(id2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><p>符合JML，同时也符合超时。修改后发现，valueSum需要在Tag类里的addPerson、delPerson方法中维护，即将数据缓存。就算频繁调用queryTagValueSum指令，也不会超时。</p><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>需要根据规格设计测试，实现对规格的一致性检查。</p><p>需要确保只修改<code>\assignable</code>允许修改的内容，每个<code>\ensure</code>均被测试。对于<code>pure</code>方法，需要保证对象中的所有成员均未被修改，在调用前后严格一致。</p><h2 id="学习体会"><a href="#学习体会" class="headerlink" title="学习体会"></a>学习体会</h2><p>通过本单元的学习，我了解了JML与Junit，并通过作业进行简单实践。第三单元与前两单元不同，此前的模式大致为：阅读指导书、理解需求、自行设计方法，实现代码并测试。而本单元的JML则限制了“方法设计”与“代码测试”，其中代码测试（这里指基于Junit的单元测试）严格约束于规格信息。若这是多人合作项目，在拥有基于自然语言书写的需求规格书的基础上，开发者与测试者可以借助JML协同工作，借助形式化表述提供工作效率，避免随意定义类或方法导致的架构混乱，白箱测试设计滞后的情况。</p><h1 id="第四单元"><a href="#第四单元" class="headerlink" title="第四单元"></a>第四单元</h1><h2 id="正向建模与开发"><a href="#正向建模与开发" class="headerlink" title="正向建模与开发"></a>正向建模与开发</h2><p>OO第4单元实现了一个简单的图书馆管理系统，使用正向建模与开发的方式实现。正向建模与开发，即先根据作业指导书（需求文档）构建UML图，再依据UML图进行代码编写，有助于进行大型项目分析与规划。</p><h2 id="本单元作业"><a href="#本单元作业" class="headerlink" title="本单元作业"></a>本单元作业</h2><p>在本单元作业中，我们实现的图书馆管理系统需要具备下列功能：查询书籍数、查询学生信用分数、借书、还书、预约书籍。</p><h3 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h3><p>以第一次作业为例，我设计了：</p><ul><li>Library：图书馆类，用于存储用户信息、在馆书籍信息。分配操作请求。</li><li>Order：预约处，用于存储用户的预约信息，每次开馆时将可移动的在馆书籍移动到预约处。</li><li>Borrow：借还处，用于处理借书与还书的请求</li><li>Student：学生信息。</li><li>OrderBook：基于基础Book类的OrderBook类，需要预约人信息，书号，预约日期等。</li></ul><p>在之后两次作业中，我基于第一次作业，又增加了书籍漂流处、操作信息登记处等类，实现方式与此前基本一致，无大规模重构。对于容易出错的书籍移动环节，我设定闭馆后需要将借还处书籍全部送回书架，开馆时再分配预约书籍。通过严格的流程降低出错概率。</p><h3 id="代码与UML模型关系"><a href="#代码与UML模型关系" class="headerlink" title="代码与UML模型关系"></a>代码与UML模型关系</h3><p>在写代码与画UML图前，我会设计简单流程图，这有助于我理清指导书思路。如图，是针对第二次作业整理的流程图。</p><h2 id="架构设计思维"><a href="#架构设计思维" class="headerlink" title="架构设计思维"></a>架构设计思维</h2><h3 id="第一单元-1"><a href="#第一单元-1" class="headerlink" title="第一单元"></a>第一单元</h3><p><strong>递归下降、OO入门：</strong>第一单元的重点任务是解析与计算表达式，熟悉Java语法，以及建立面向对象的思维。难点在于递归下降方法，以及第一作业的架构设计（如果做的好，后续不需要完全重构，会节约很多时间）。</p><h3 id="第二单元-1"><a href="#第二单元-1" class="headerlink" title="第二单元"></a>第二单元</h3><p><strong>多线程：</strong>实现模拟新主楼电梯调度系统。难点在于多线程的调试，以及bug较难复现。评测机在这一单元十分重要。</p><h3 id="第三单元-1"><a href="#第三单元-1" class="headerlink" title="第三单元"></a>第三单元</h3><p><strong>JML：</strong>本单元主要通过阅读JML，编写对应的函数。个人认为这一单元最困难，JML给我体验很不好。本人认为仅依靠JML书写规格不太现实，实际开发中，JML应该和自然语言的说明一同出现，辅助开发者进行程序设计。</p><h3 id="第四单元-1"><a href="#第四单元-1" class="headerlink" title="第四单元"></a>第四单元</h3><p><strong>UML：</strong>实现一个图书馆管理系统，在作业中要用到正向建模的方法。先根据作业指导书构建UML图，再依据UML图进行代码编写。</p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>依据个人浅薄的实习面试经历，第二单元中的多线程出现频率极高。在会用多线程锁的基础上，还需要阅读源码，能理解与讲清楚各种锁的区别。同时，各种细节问题也常被问到，如各类容器是如何实现的，源码有什么区别。JML相对来讲十分冷门，不会被问到；UML，我个人认为这是一种架构设计的思维，而非具体知识点，不会出现具体的问题。</p><p>我认为在此后的学习中，我更应该关注原理问题，而不是如何尽快让代码跑起来。</p><h2 id="测试思维"><a href="#测试思维" class="headerlink" title="测试思维"></a>测试思维</h2><p>第一、二单元主要借助了同学编写的评测机进行评测，同时手工编写了少量数据，用于开发过程中测试各单元功能。</p><p>第三单元做的不是很好，既没有用评测机、也没有自己测试过。</p><p>第四单元没有使用评测机，仅手工编写数据。因为第四单元作业逻辑较简单，且代码正确性也与自行设计的总流程有关，应该自行编写有逻辑的测试，而不是依靠评测机。</p><h2 id="课程收获"><a href="#课程收获" class="headerlink" title="课程收获"></a>课程收获</h2><p>很开心，2024年的OO课程结束了，我也表现得比预想中好。其实我本来应在去年修这门课，但去年第一次作业没有交上，再加上其他原因，我认为自己无法良好完成课程，遂退课。今年再选课时，我的能力较去年也有了一定提升，学习效果也好了很多。非常感谢老师、助教、以及同学们的帮助，同时感谢面对困难没有放弃的自己。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程收获 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅地进行论文检索</title>
      <link href="/post/e66c3671.html"/>
      <url>/post/e66c3671.html</url>
      
        <content type="html"><![CDATA[<p>前提：被迫（或许算是）需要做一个项目，基于知识图谱的xxxxxx的挖掘技术，在老师要求下先进行前期资料调研。苯人的论文检索水平可谓是丑陋，滑稽，所以有了此篇学习博客。</p><p>主要在两个方面进行调研：国家自然科学基金项目，以及CCF的A/B类会议中的相关文献。</p><h3 id="国家自然科学基金项目"><a href="#国家自然科学基金项目" class="headerlink" title="国家自然科学基金项目"></a>国家自然科学基金项目</h3><p>地址在此：<a href="https://kd.nsfc.cn/">https://kd.nsfc.cn/</a> ，打开就到了。</p><p>检索界面也很简单，打开首页里的数据查询，输一下关键词，之后会选择是结题项目/科研成果。这里就先选项目，之后可以在侧边栏选择结题年度，然后就是一篇篇看喵。记录一下项目名与摘要。</p><h3 id="CCF的A-B类会议中相关文献"><a href="#CCF的A-B类会议中相关文献" class="headerlink" title="CCF的A/B类会议中相关文献"></a>CCF的A/B类会议中相关文献</h3><p>CCF推荐列表：<a href="https://ccf.atom.im/">https://ccf.atom.im/</a></p><p>首先上表似乎只是列出了会议名以及相应类型，没有跳转链接。起初我想用校内VPN，在相关数据库里检索，但是我没太搞懂一个数据库与会议们的对应关系，摸索后采取了下述方法检索。</p><p>首先需要：<a href="https://dblp.uni-trier.de/">https://dblp.uni-trier.de/</a></p><p>这好像是个大型的检索网站，只检索，提供文章的链接。进去后输入关键词检索，之后可以在右边栏对会议类型，年份，是否可免费获取等进行限定（好吧，像是谷歌学术）。</p><p>之后如果要获取的话，可以通过vpn或者 sci-hub 下载。后者要注意，搜索时报上<strong>DOI</strong>，而不是愚蠢地搜题目。</p><p>呃呃呃呃，基本方式如上喵。但是检索英文文献中还存在问题，比如说中文关键词是交通，那么英文关键词怎么办，仅仅是 traffic 吗？还是说需要尝试一些近义词。这里日后再补充。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库-绪论</title>
      <link href="/post/69eb21f4.html"/>
      <url>/post/69eb21f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的四个基本概念"><a href="#数据库的四个基本概念" class="headerlink" title="数据库的四个基本概念"></a>数据库的四个基本概念</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>数据库中存储的基本对象，<strong>描述事物的符号记录</strong>。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>是长期储存在计算机内的、有组织的、可共享的数据集合。数据库中的数据按一定的数据模型组织、存储和描述，由DBMS统一管理，多用户共享。</p><p>具有较小的<strong>冗余度</strong>，较高的<strong>数据独立性</strong>和<strong>易扩展性</strong>，并可为各种用户共享。</p><h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p>通用的软件系统，由一组计算机程序构成。它能够对数据库进行有效的管理，并为用户提供了一个软件环境，方便用户使用数据库中的信息。</p><h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><p>一个计算机存储记录的系统。即，它是一个计算机系统，该系统的目标是存储信息并支持用户检索和更新所需要的信息。它通常由数据库，软件，硬件，用户几个部分组成。</p><h2 id="数据库管理技术的产生和发展"><a href="#数据库管理技术的产生和发展" class="headerlink" title="数据库管理技术的产生和发展"></a>数据库管理技术的产生和发展</h2><p>人工管理阶段、文件系统阶段、数据库系统阶段。</p><h3 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h3><ul><li><p>数据不保存</p></li><li><p>应用程序管理数据</p></li><li><p>数据不共享</p></li><li><p>数据不具有独立性</p></li></ul><h3 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h3><ul><li><p>数据以文件的形式长期保存。文件形式多样化（索引文件、链接文件、直接存取文件、倒排文件等）。</p></li><li><p>一个数据文件对应一个或几个用户程序，还是面向应用的，具有一定的共享性。</p></li><li><p>由文件系统管理数据。通过文件系统提供存取方法，支持对文件的基本操作（增、删、改、查等），用户程序不必考虑物理细节。数据的存取基本上以记录为单位。</p></li><li><p>数据与程序有一定的独立性，因为文件的逻辑结构与存储结构由系统进行转换，数据在存储上的改变不一定反映在程序上。</p></li></ul><p>存在的<strong>问题</strong>有：数据冗余和不一致、数据访问困难、数据孤立、数据独立性差。（完整性、原子性、并发访问异常、安全性）</p><h3 id="数据库系统阶段"><a href="#数据库系统阶段" class="headerlink" title="数据库系统阶段"></a>数据库系统阶段</h3><p>面向全组织的结构化。</p><ul><li><p>支持全企业的应用而不是某一个应用。</p></li><li><p>通过统一的结构来描述数据及数据之间客观存在的本质联系，这是数据库系统的主要特征之一，是与文件系统的根本差别。</p></li></ul><p>数据集成与共享，可控冗余度。</p><p>数据独立性好。</p><p>统一的控制机制。</p><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p>数据模型是实现数据抽象的主要工具，是对现实世界数据特征的抽象。</p><script type="math/tex; mode=display">数据模型三要素\begin{cases} & 数据结构: 描述系统的静态特性，是所研究的对象类型的集合。包括：数据本身，数据之间的联系 \\[5ex]& 数据操作: 对系统动态特性的描述，用于描述施加于数据之上的各种操作 \\[5ex]& 数据的约束条件: 完整性规则的集合，规定数据库状态及状态变化所应满足的条件，以保证数据的正确、有效、相容。\end{cases}</script><h2 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h2><h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><p>按照用户观点对数据和信息建模。</p><h3 id="逻辑模型"><a href="#逻辑模型" class="headerlink" title="逻辑模型"></a>逻辑模型</h3><p>从计算机实现的观点来对数据建模。是信息世界中的概念和联系在计算机世界中的表示方法。一般有严格的形式化定义，以便于在计算机上实现。如层次模型、网状模型、关系模型、面向对象模型。</p><h3 id="物理模型"><a href="#物理模型" class="headerlink" title="物理模型"></a>物理模型</h3><p>从计算机的物理存储角度对数据建模。是数据在物理设备上的存放方法和表现形式的描述，以实现数据的高效存取。如索引，HASH文件等等。</p><h1 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h1><p>数据库通常采用三级模式结构。</p><h2 id="三级模式结构"><a href="#三级模式结构" class="headerlink" title="三级模式结构"></a>三级模式结构</h2><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>也称逻辑式。是所有用户的公共数据视图。是数据库中全体数据的全局逻辑结构和特性的描述。</p><h3 id="外模式"><a href="#外模式" class="headerlink" title="外模式"></a>外模式</h3><p>用户的数据视图。是数据的局部逻辑结构，模式的子集。</p><h3 id="内模式"><a href="#内模式" class="headerlink" title="内模式"></a>内模式</h3><p>又称存储模式。数据的物理结构及存储方式。</p><h2 id="最常用的逻辑数据模型"><a href="#最常用的逻辑数据模型" class="headerlink" title="最常用的逻辑数据模型"></a>最常用的逻辑数据模型</h2><h3 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h3><p>用树结构表示实体之间联系的模型叫层次模型。</p><h3 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h3><p><strong>是一个满足下列条件的有向图：</strong></p><ul><li><p>可以有一个以上的结点无双亲结点。</p></li><li><p>至少有一个结点有多于一个的双亲结点。</p></li></ul><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>用二维表来表示实体及其相互联系。建立在严格的数学概念基础上。</p><h1 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h1><p>DBMS职责：</p><ul><li><p>决定数据库中的信息内容和结构</p></li><li><p>决定数据库的存储结构和存取策略</p></li><li><p>定义数据的安全性要求和完整性约束条件</p></li><li><p>监控数据库的使用和运行</p></li><li><p>数据库的改进和重组重构</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断表示数值的字符串</title>
      <link href="/post/86af2470.html"/>
      <url>/post/86af2470.html</url>
      
        <content type="html"><![CDATA[<p>这是一道来自leetcode的题目（嘎嘎），官方的做法是利用有限状态机做，俺一开始想用正则表达式匹配，但是没配上，记录一下讲解的思路。</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>实现一个函数用来判断字符串是否表示数值（包括整数和小数）。</p><p>数值（按顺序）可以分成以下几个部分：</p><ul><li><p>若干空格</p></li><li><p>一个小数或者整数</p></li><li><p>（可选）一个 ‘e’ 或 ‘E’ ，后面跟着一个整数</p></li><li><p>若干空格</p></li></ul><p>小数（按顺序）可以分成以下几个部分：</p><ul><li>（可选）一个符号字符（’+’ 或 ‘-‘）</li><li>下述格式之一：<br>  至少一位数字，后面跟着一个点 ‘.’<br>  至少一位数字，后面跟着一个点 ‘.’ ，后面再跟着至少一位数字<br>  一个点 ‘.’ ，后面跟着至少一位数字</li></ul><p>整数（按顺序）可以分成以下几个部分：</p><ul><li><p>（可选）一个符号字符（’+’ 或 ‘-‘）</p></li><li><p>至少一位数字</p></li></ul><p>部分数值列举如下：</p><p>[“+100”, “5e2”, “-123”, “3.1416”, “-1E-16”, “0123”]</p><p>部分非数值列举如下：</p><p>[“12e”, “1a3.14”, “1.2.3”, “+-5”, “12e+5.4”]</p><h1 id="思路描述"><a href="#思路描述" class="headerlink" title="思路描述"></a>思路描述</h1><p>有限状态机，有限状态机，相信接触过 verilog 语言或是数字电路的人应该会对此有印象，并用纸笔/ verilog 语言搭建了<del>状态混乱的</del>有限状态机。</p><p>好吧，其实在这里，看看如何到达判定为“是数值的状态”，看看转移规则。因为这里状态和转移方式太多了，所以用图表示。严格按照定义逐步写出即可，其实也是正则表达式的思路。</p><p><img src="https://miaomiao-1-1319022947.cos.ap-beijing.myqcloud.com/20230710233307Sam.jpg" alt=""></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>或许这样设定状态机的方法比正则要简单（前提是能想到）。于我，使用正则表达式的困难在于：语法不清楚且构建时结构混乱，呱呱。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-2-实现类后就要继承和重写</title>
      <link href="/post/e2b57d7f.html"/>
      <url>/post/e2b57d7f.html</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>继承，即为定义子类继承父类的特征和行为。<code>A extends B</code>：<code>A</code> 继承了 <code>B</code> ，<code>A</code> 是 <code>B</code> 的子类， <code>A</code> 得到了 <code>B</code> 的属性和方法。</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>建立了继承关系之后，可以使用父类型去引用通过子类型创建的对象。</p><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>obj <strong>instanceof</strong> A：obj 为一个对象引用，A 为一个类型（类或接口），表达式的取值结果为布尔型，如果 obj 的创建类型为 A，则结果为 true，否则为 false。若结果为 true，使用向下转型，使用一个 A 类型的对象来引用obj： <code>A ao = (A)obj</code>。</p><h1 id="对象方法的重写和复用"><a href="#对象方法的重写和复用" class="headerlink" title="对象方法的重写和复用"></a>对象方法的重写和复用</h1><p>方法重写：让子类重新实现一个在父类中已经实现的方法。</p><p>通过使用关键词<strong>super</strong>，确保进行重写时调用父类中此定义方法。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><p>在上次题目的基础上进行增量开发，上次的题目在：<a href="https://cololabissaira666.github.io/post/9c53426d.html">https://cololabissaira666.github.io/post/9c53426d.html</a></p><p>需要做的工作有：</p><ul><li>建立 Equipment 装备类。我们将 Task1 中的 Bottle 以及下面增加的所有药水类、武器类统称为 <em>“装备类”</em>，使所有装备类均继承自 Equipment 类（该类因而可称为基类， base class），请将所有装备都具有的属性定义在这个类里。同时，Task1 中每位冒险者拥有承载多个 Bottle 的容器，这里将承载 Bottle 的容器改为承载所有装备类的容器。</li><li>为冒险者新增一些属性如下：生命值 （<code>health</code>, 浮点数，默认值 100.0）、经验值（ <code>exp</code>, 浮点数，默认 0.0）、金钱数（ <code>money</code>, 浮点数，默认 0.0）。</li><li>增加药水 HealingPotion 和 ExpBottle 并继承 Bottle 的全部属性；添加“武器类” Sword 以及 RareSword 和 EpicSword，他们继承 Sword 全部属性。见下表：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">药水类型</th><th style="text-align:left">属性</th><th style="text-align:left">属性类型</th></tr></thead><tbody><tr><td style="text-align:left">HealingPotion</td><td style="text-align:left">包括 Bottle 的全部属性，新增加属性 efficiency，代表药水的治疗效果</td><td style="text-align:left">Bottle 原有属性不变，efficiency 为浮点数类型</td></tr><tr><td style="text-align:left">ExpBottle</td><td style="text-align:left">包括 Bottle 的全部属性，新增加属性 expRatio，代表水瓶对于经验值的增强效果</td><td style="text-align:left">Bottle 原有属性不变，expRatio为浮点数类型</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">武器类型</th><th style="text-align:left">属性</th><th style="text-align:left">属性类型</th></tr></thead><tbody><tr><td style="text-align:left">Sword</td><td style="text-align:left">id, name, price, sharpness。其中 id, name, price 与 Task1 中 Bottle 类的定义相同，sharpness 表示武器的锋利程度</td><td style="text-align:left">id, name, price 与 Bottle 类中相应属性类型相同，sharpness 为浮点数类型</td></tr><tr><td style="text-align:left">RareSword</td><td style="text-align:left">包括 Sword 的全部属性，新增加属性 extraExpBonus，代表使用武器的附加效果</td><td style="text-align:left">Sword 原有属性不变，extraExpBonus 为浮点数类型</td></tr><tr><td style="text-align:left">EpicSword</td><td style="text-align:left">包括 Sword 的全部属性，新增加属性 evolveRatio，代表使用武器的附加效果</td><td style="text-align:left">Sword 原有属性不变，evolveRatio 为浮点数类型</td></tr></tbody></table></div><ul><li>为每一种装备设置一个<strong>使用</strong>方法，定义如下，设冒险者A使用了装备B：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">装备B的类型</th><th style="text-align:left">使用效果</th><th style="text-align:left">输出文本</th></tr></thead><tbody><tr><td style="text-align:left">Bottle（若 filled 为 true）</td><td style="text-align:left">A的生命值增加[B的 capacity 属性]的十分之一，之后 B 的 filled 变为 false，price 变为原来的十分之一（向下取整）。</td><td style="text-align:left">{A 的 name} drank {B 的 name} and recovered {生命值增加量}.</td></tr><tr><td style="text-align:left">HealingPotion（若 filled为true）</td><td style="text-align:left">A的生命值增加[B的 capacity 属性]的十分之一，之后 B 的 filled 变为 false，price 变为原来的十分之一（向下取整）。然后A的生命值再额外增加[B的capacity属性]乘以[B的efficiency属性]的量。</td><td style="text-align:left">{A 的 name} drank {B 的 name} and recovered {生命值增加量}. {A 的 name} recovered extra {生命值额外增加量}.</td></tr><tr><td style="text-align:left">ExpBottle（若 filled 为 true）</td><td style="text-align:left">A的生命值增加[B的 capacity 属性]的十分之一，之后 B 的 filled 变为 false，price 变为原来的十分之一（向下取整）。然后A的经验值变为原来的[B的expRatio属性]倍。</td><td style="text-align:left">{A 的 name} drank {B 的 name} and recovered {生命值增加量}. {A 的 name}’s exp became {A 变化后的经验}.</td></tr><tr><td style="text-align:left">Bottle/HealingPotion/ExpBottle（若filled为false）</td><td style="text-align:left">无任何作用效果。</td><td style="text-align:left">Failed to use {B 的 name} because it is empty.</td></tr><tr><td style="text-align:left">Sword</td><td style="text-align:left">使用后A的生命值减少 10.0、经验值增加 10.0，金钱数增加相当于[B 的 sharpness属性]一倍的量。</td><td style="text-align:left">{A 的 name} used {B 的 name} and earned {增加的金钱数}.</td></tr><tr><td style="text-align:left">RareSword</td><td style="text-align:left">使用后A的生命值减少 10.0、经验值增加 10.0，金钱数增加相当于[B 的 sharpness属性]一倍的量。然后 A 的经验值额外增加[B 的 extraExpBonus 属性]。</td><td style="text-align:left">{A 的name} used {B 的name} and earned {增加的金钱数}. {A 的name} got extra exp {额外获得的经验}.</td></tr><tr><td style="text-align:left">EpicSword</td><td style="text-align:left">使用后A的生命值减少 10.0、经验值增加 10.0，金钱数增加相当于[B 的 sharpness属性]一倍的量。然后B的sharpness 属性变为原来的 evolveRatio倍。</td><td style="text-align:left">{A 的 name} used {B 的 name} and earned {增加的金钱数}. {B 的 name}’s sharpness became {B 变化后的sharpness}.</td></tr></tbody></table></div><ul><li>实现各项装备的查询和增删指令，设置如下操作：<ol><li>加入一个冒险者</li><li>给某个冒险者添加某件装备（装备包括药水和武器）</li><li>删除某个冒险者拥有的某个装备</li><li>查询某个冒险者所拥有装备的价格之和</li><li>查询某个冒险者所拥有装备的价格最大值</li><li>查询某个冒险者拥有的装备总数</li><li>打印一个装备的全部属性，属性的输出顺序与输入创建该装备时给定的各参数顺序一致，具体格式详见下方 <em>属性打印方式</em></li><li>某个冒险者使用其拥有的某个装备</li><li>打印某个冒险者的所有状态</li></ol></li></ul><hr><h2 id="输入、输出格式"><a href="#输入、输出格式" class="headerlink" title="输入、输出格式"></a>输入、输出格式</h2><p>第一行一个整数 m，表示操作的个数。</p><p>接下来的 m行，每行一个形如 <code>&#123;type&#125; &#123;attribute&#125;</code> 的操作，<code>&#123;type&#125;</code> 和 <code>&#123;attribute&#125;</code> 间、若干个 <code>&#123;attribute&#125;</code> 间使用若干个空格分割，操作输入形式及其含义如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">type</th><th style="text-align:left">attribute</th><th style="text-align:left">意义</th><th style="text-align:left">输出文本</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;name&#125;</code></td><td style="text-align:left">加入一个 ID 为 <code>&#123;adv_id&#125;</code>、名字为 <code>&#123;name&#125;</code> 的冒险者，且未持有任何装备</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;equipment_type&#125; &#123;vars&#125;</code>（equipment_type和vars的含义见下表）</td><td style="text-align:left">给予某个人某件装备，装备类型由 <code>&#123;equipment_type&#125;</code> 定义，属性由 <code>&#123;vars&#125;</code> 定义，<strong>所有的瓶子初始默认装满</strong></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;equipment_id&#125;</code></td><td style="text-align:left">删除 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 ID 为 <code>&#123;equipment_id&#125;</code> 的装备</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>&#123;adv_id&#125;</code></td><td style="text-align:left">查询 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者所持有装备的价格之和</td><td style="text-align:left">一个整数，表示该冒险者所有装备的价格总和</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>&#123;adv_id&#125;</code></td><td style="text-align:left">查询 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者所持有装备价格的最大值</td><td style="text-align:left">一个整数，表示该冒险者所有装备价格的最大值</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>&#123;adv_id&#125;</code></td><td style="text-align:left">查询 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的装备总数</td><td style="text-align:left">一个整数，表示该冒险者所有装备的数量之和</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;equipment_id&#125;</code></td><td style="text-align:left">打印 ID 为 <code>&#123;equipment_id&#125;</code> 的装备的全部属性</td><td style="text-align:left">该装备的全部属性，格式见下文“属性打印方式”</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>&#123;adv_id&#125;&#123;equipment_id&#125;</code></td><td style="text-align:left">ID为 <code>&#123;adv_id&#125;</code> 的冒险者使用其 ID 为 <code>&#123;equipment_id&#125;</code> 的装备</td><td style="text-align:left">装备在使用时会产生输出，除此之外无额外输出。</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>&#123;adv_id&#125;</code></td><td style="text-align:left">打印ID为 <code>&#123;adv_id&#125;</code> 的冒险者的所有状态。</td><td style="text-align:left">一个字符串表示冒险者的状态： <code>The adventurer&#39;s id is &#123;adv_id&#125;, name is &#123;name&#125;, health is &#123;health&#125;, exp is &#123;exp&#125;, money is &#123;money&#125;.</code></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">装备类型</th><th style="text-align:left">equipment_type</th><th style="text-align:left">vars</th></tr></thead><tbody><tr><td style="text-align:left">Bottle</td><td style="text-align:left">1</td><td style="text-align:left">id name price capacity</td></tr><tr><td style="text-align:left">HealingPotion</td><td style="text-align:left">2</td><td style="text-align:left">id name price capacity efficiency</td></tr><tr><td style="text-align:left">ExpBottle</td><td style="text-align:left">3</td><td style="text-align:left">id name price capacity expRatio</td></tr><tr><td style="text-align:left">Sword</td><td style="text-align:left">4</td><td style="text-align:left">id name price sharpness</td></tr><tr><td style="text-align:left">RareSword</td><td style="text-align:left">5</td><td style="text-align:left">id name price sharpness extraExpBonus</td></tr><tr><td style="text-align:left">EpicSword</td><td style="text-align:left">6</td><td style="text-align:left">id name price sharpness evolveRatio</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:left">装备类型</th><th style="text-align:left">属性打印方式</th></tr></thead><tbody><tr><td style="text-align:left">Bottle</td><td style="text-align:left"><code>The bottle&#39;s id is &#123;id&#125;, name is &#123;name&#125;, capacity is &#123;capacity&#125;, filled is &#123;filled&#125;.</code></td></tr><tr><td style="text-align:left">HealingPotion</td><td style="text-align:left"><code>The healingPotion&#39;s id is &#123;id&#125;, name is &#123;name&#125;, capacity is &#123;capacity&#125;, filled is &#123;filled&#125;, efficiency is &#123;efficiency&#125;.</code></td></tr><tr><td style="text-align:left">ExpBottle</td><td style="text-align:left"><code>The expBottle&#39;s id is &#123;id&#125;, name is &#123;name&#125;, capacity is &#123;capacity&#125;, filled is &#123;filled&#125;, expRatio is &#123;expRatio&#125;.</code></td></tr><tr><td style="text-align:left">Sword</td><td style="text-align:left"><code>The sword&#39;s id is &#123;id&#125;, name is &#123;name&#125;, sharpness is &#123;sharpness&#125;.</code></td></tr><tr><td style="text-align:left">RareSword</td><td style="text-align:left"><code>The rareSword&#39;s id is &#123;id&#125;, name is &#123;name&#125;, sharpness is &#123;sharpness&#125;, extraExpBonus is &#123;extraExpBonus&#125;.</code></td></tr><tr><td style="text-align:left">EpicSword</td><td style="text-align:left"><code>The epicSword&#39;s id is &#123;id&#125;, name is &#123;name&#125;, sharpness is &#123;sharpness&#125;, evolveRatio is &#123;evolveRatio&#125;.</code></td></tr></tbody></table></div><h2 id="数据范围与操作限制"><a href="#数据范围与操作限制" class="headerlink" title="数据范围与操作限制"></a>数据范围与操作限制</h2><h3 id="变量约束"><a href="#变量约束" class="headerlink" title="变量约束"></a>变量约束</h3><div class="table-container"><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">整数</td><td style="text-align:left">取值范围：0 - 2147483647</td></tr><tr><td style="text-align:left">name</td><td style="text-align:left">字符串</td><td style="text-align:left">保证不会出现空白字符</td></tr><tr><td style="text-align:left">price</td><td style="text-align:left">长整数</td><td style="text-align:left">在 long 精度范围内，且保证不小于 0</td></tr><tr><td style="text-align:left">capacity, efficiency, expRatio, sharpness, extraExpBonus, evolveRatio, health, exp, money</td><td style="text-align:left">浮点数</td><td style="text-align:left">在 double 精度范围内</td></tr></tbody></table></div><h3 id="操作约束"><a href="#操作约束" class="headerlink" title="操作约束"></a>操作约束</h3><ul><li>操作数满足 1≤m≤2000。</li><li><strong>保证所有冒险者与装备的 ID 两两不同。</strong></li><li>操作2-9：冒险者 ID 一定存在。</li><li>操作 3,7,8：冒险者一定持有该 ID 的装备。</li><li>操作 4：若冒险者不持有任何装备，则输出 0。</li><li>操作 5：冒险者一定持有至少一个装备。</li></ul><h2 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h2><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">1 2 Co20ocvblT</span><br><span class="line">1 30 Al8QnWnkS7</span><br><span class="line">1 91 pqWY5UNcm4</span><br><span class="line">2 91 1 26 6DlfOJGzfY 74 96.3964</span><br><span class="line">2 2 6 35 yv58Ec49pK 2 65.161 68.6988</span><br><span class="line">2 2 1 71 FEw7siBqbW 64 66.534</span><br><span class="line">2 91 2 44 OLy4CqtmrO 45 60.135 13.2503</span><br><span class="line">2 30 1 56 H2EvYaqUXD 0 64.7676</span><br><span class="line">2 91 6 65 Wjsn3jVy6E 60 20.1061 23.1743</span><br><span class="line">2 2 2 28 0WnMAYPzUH 37 27.0554 10.4833</span><br><span class="line">3 30 56</span><br><span class="line">4 30</span><br><span class="line">5 91</span><br><span class="line">6 91</span><br><span class="line">7 91 65</span><br><span class="line">8 2 35</span><br><span class="line">9 91</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">74</span><br><span class="line">3</span><br><span class="line">The epicSword&#x27;s id is 65, name is Wjsn3jVy6E, sharpness is 20.1061, evolveRatio is 23.1743.</span><br><span class="line">Co20ocvblT used yv58Ec49pK and earned 65.161.</span><br><span class="line">yv58Ec49pK&#x27;s sharpness became 4476.4825068.</span><br><span class="line">The adventurer&#x27;s id is 91, name is pqWY5UNcm4, health is 100.0, exp is 0.0, money is 0.0.</span><br></pre></td></tr></table></figure><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><ul><li>“装备类”包括 Bottle, HealingPotion 等 6 个不同的类，而冒险者需要拥有一个可以承载这 6 个装备类的容器。为了避免为 6 个装备类分别维护容器的麻烦，我们可以使用“向上转型”，在 Adventurer 类中统一维护一个承载 Equipment 的容器，并让 6 个装备类全部继承自 Equipment 类。由于“多态”的特性，在向上转型后对象仍然不会失去其原先的装备性质。</li></ul><h1 id="代码及思路"><a href="#代码及思路" class="headerlink" title="代码及思路"></a>代码及思路</h1><p>总的来说，只要根据题意实现各个类，再微调hw-1的代码即可。个人感觉比较重要的部分是类的继承和方法重写，同时也要考虑向上转型的问题。</p><p>这次代码量增加了，为了方便阅读不直接放在下文，访问此链接即可：<a href="https://github.com/CololabisSaira666/aboutOO">https://github.com/CololabisSaira666/aboutOO</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-1-爪洼-实现类</title>
      <link href="/post/9c53426d.html"/>
      <url>/post/9c53426d.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习Java，首先关于基础知识部分，在菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> 中已经介绍地很清楚了，不再赘述，需要时查阅即可。</p><h1 id="类的构造"><a href="#类的构造" class="headerlink" title="类的构造"></a>类的构造</h1><p>Java作为一门面向对象语言，应该重点关注一下类和对象的概念，下面实践一下，构建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> filled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id=id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，通常来说，我们不将属性定义为 public 的，而是私有化保护内部数据，只暴露数据的操作接口。</p><p>当我们拥有一个类之后，就可以在 MainClass 中引用了。首先我们需要 new 一个对象，然后将他实例化。以下为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> &#123;</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>();  <span class="comment">//new Bottle() 即构造函数</span></span><br><span class="line">        bottle.setName(<span class="string">&quot;Cola&quot;</span>);</span><br><span class="line">        bottle.setPrice(<span class="number">3</span>);</span><br><span class="line">        bottle.setId(<span class="number">1</span>);</span><br><span class="line">        bottle.setCapacity(<span class="number">100.0</span>);</span><br><span class="line">        bottle.setFilled(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化的过程中我们会用到构造函数，所以在类中需要以 <strong>public 类名</strong>的方式定义构造函数。所以在这里，我们给之前构造的类定义以下构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> filled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bottle</span> <span class="params">(<span class="type">int</span> id, String name, <span class="type">long</span> price, <span class="type">double</span> capacity, <span class="type">boolean</span> filled)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.filled = filled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>Java 容器分为 Collection 和 Map 两大类，用于存储数据和对象。以下为基础的容器知识入门：<a href="https://blog.csdn.net/qq_43969123/article/details/105804956"> java容器超详细_CoderWriter的博客-CSDN博客</a>。</p><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>想象你是一个冒险者，现在正在一个新的星球上进行探险，这个过程中你需要努力收集各种物品来不断增强自身能力值。在第一个 task 中你需要完成两个任务：</p><ul><li>对基本物品 Bottle 和冒险者 Adventurer 进行建模</li><li>利用容器的知识，管理多个冒险者</li></ul><p>首先，你需要构造一个 <strong>Bottle</strong> 类，来表示冒险者需要用到的瓶子类，要求 <strong>Bottle</strong> 类包含属性：ID，名字，价格，容量，和表达瓶子是否装满的标志量。</p><p>接着，再构造一个<strong>Adventurer</strong>类，用来表示冒险者类，要求<strong>Adventurer</strong>类包含属性：ID，名字，承载多个Bottle的容器。</p><p>在这个问题中，你需要管理多个冒险者。初始时，你没有需要管理的冒险者。接下来会有 12个操作：</p><ol><li>加入一个需要管理的冒险者</li><li>给某个冒险者增加一个瓶子</li><li>删除某个冒险者的某个瓶子</li><li>更新某个冒险者所持有的某个瓶子的价格</li><li>更新某个冒险者所持有的某个瓶子是否装满</li><li>查询某个冒险者所持有的某个瓶子的名字</li><li>查询某个冒险者所持有的某个瓶子的价格</li><li>查询某个冒险者所持有的某个瓶子的容量</li><li>查询某个冒险者所持有的某个瓶子是否装满</li><li>输出某个冒险者所持有的某个瓶子的字符串描述</li><li>查询某个冒险者所持有瓶子的价格之和</li><li>查询某个冒险者所持有瓶子价格的最大值</li></ol><p>操作1-5不需要任何输出，只需要对操作 6-12 进行输出回答。</p><hr><h2 id="输入-输出格式"><a href="#输入-输出格式" class="headerlink" title="输入/输出格式"></a>输入/输出格式</h2><p>第一行一个整数 m，表示操作的个数。</p><p>接下来的 m 行，每行一个形如 <code>&#123;type&#125; &#123;attribute&#125;</code> 的操作，<code>&#123;type&#125;</code> 和 <code>&#123;attribute&#125;</code> 间、若干个 <code>&#123;attribute&#125;</code> 间使用若干个空格分割，操作输入形式及其含义如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">type</th><th style="text-align:left">attribute</th><th style="text-align:left">意义</th><th style="text-align:left">输出文本</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;name&#125;</code></td><td style="text-align:left">加入一个 ID 为 <code>&#123;adv_id&#125;</code>、名字为 <code>&#123;name&#125;</code> 的冒险者，且未持有任何瓶子</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125; &#123;name&#125; &#123;price&#125; &#123;capacity&#125;</code></td><td style="text-align:left">给 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者增加一个瓶子，瓶子的 ID、名字、价格、容量分别为 <code>&#123;bot_id&#125;</code>、<code>&#123;name&#125;</code>、<code>&#123;price&#125;</code>、<code>&#123;capacity&#125;</code>，<strong>且默认为已装满</strong></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td style="text-align:left">将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子删除</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;&#123;price&#125;</code></td><td style="text-align:left">将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子的价格更改为 <code>&#123;price&#125;</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;&#123;filled&#125;</code></td><td style="text-align:left">将 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子的装满的状态更改为 <code>&#123;filled&#125;</code></td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td style="text-align:left">查询ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子的名字</td><td style="text-align:left">一个字符串，表示瓶子名字</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td style="text-align:left">查询ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子的价格</td><td style="text-align:left">一个整数，表示瓶子价格</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td style="text-align:left">查询ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子的容量</td><td style="text-align:left">一个浮点数，表示瓶子容量</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td style="text-align:left">查询ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子是否装满</td><td style="text-align:left">一个字符串，表示瓶子是否装满（输出true表示装满，false表示没有装满）</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left"><code>&#123;adv_id&#125; &#123;bot_id&#125;</code></td><td style="text-align:left">查询ID 为 <code>&#123;adv_id&#125;</code> 的冒险者的 id 为 <code>&#123;bot_id&#125;</code> 的瓶子的字符串描述</td><td style="text-align:left">以 <code>The bottle&#39;s id is &#123;id&#125;, name is &#123;name&#125;, capacity is &#123;capacity&#125;, filled is &#123;filled&#125;.</code> 的形式打印状态。</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left"><code>&#123;adv_id&#125;</code></td><td style="text-align:left">查询 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者所持有瓶子的价格之和</td><td style="text-align:left">一个整数，表示瓶子价格之和</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left"><code>&#123;adv_id&#125;</code></td><td style="text-align:left">查询 ID 为 <code>&#123;adv_id&#125;</code> 的冒险者所持有瓶子价格的最大值</td><td style="text-align:left">一个整数，表示瓶子价格的最大值</td></tr></tbody></table></div><h2 id="数据范围与操作限制"><a href="#数据范围与操作限制" class="headerlink" title="数据范围与操作限制"></a>数据范围与操作限制</h2><h3 id="变量约束"><a href="#变量约束" class="headerlink" title="变量约束"></a>变量约束</h3><div class="table-container"><table><thead><tr><th style="text-align:left">变量</th><th style="text-align:left">类型</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>id (adv_id, bot_id)</code></td><td style="text-align:left">整数</td><td style="text-align:left">取值范围：0 - 2147483647</td></tr><tr><td style="text-align:left"><code>name</code></td><td style="text-align:left">字符串</td><td style="text-align:left">保证不会出现空白字符</td></tr><tr><td style="text-align:left"><code>price</code></td><td style="text-align:left">长整数</td><td style="text-align:left">在 long 精度范围内，且保证不小于 0</td></tr><tr><td style="text-align:left"><code>capacity</code></td><td style="text-align:left">浮点数</td><td style="text-align:left">在 double 精度范围内</td></tr></tbody></table></div><h3 id="操作约束"><a href="#操作约束" class="headerlink" title="操作约束"></a>操作约束</h3><ul><li><strong>保证所有冒险者与瓶子的 ID 两两不同。</strong></li><li>操作 2-12：保证冒险者 ID 一定存在。</li><li>操作 3-10：冒险者一定持有该 ID 的瓶子。</li><li>操作 11：若冒险者不持有任何瓶子，则输出 0。</li><li>操作 12：冒险者持有至少一个瓶子。</li><li>操作数满足 1≤m≤2000。</li></ul><h2 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><strong>样例输入</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">1 2 Co20ocvblT</span><br><span class="line">1 30 Al8QnWnkS7</span><br><span class="line">1 91 pqWY5UNcm4</span><br><span class="line">2 91  7 q6DlfOJGzf 82 48.5801</span><br><span class="line">2 30  8 0vyv58Ec49 25 12.1451</span><br><span class="line">2 30  56 OdcdRFEw7s 13 34.3745</span><br><span class="line">2 91  64 jMZ9uBOLy4 45 38.1122</span><br><span class="line">2 2  65 COIecJNdIH 89 41.7995</span><br><span class="line">2 2  26 UXDaKL9P1O 79 36.1887</span><br><span class="line">2 91  15 Vy6EKNgojP 10 35.5545</span><br><span class="line">3 91 7</span><br><span class="line">4 30 56 67</span><br><span class="line">5 91 15 true</span><br><span class="line">6 2 65</span><br><span class="line">7 91 15</span><br><span class="line">8 2 26</span><br><span class="line">9 91 15</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><strong>样例输出</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COIecJNdIH</span><br><span class="line">10</span><br><span class="line">36.1887</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h1 id="题目思考-amp-代码"><a href="#题目思考-amp-代码" class="headerlink" title="题目思考&amp;代码"></a>题目思考&amp;代码</h1><p>我的思路：因为<strong>保证所有冒险者与瓶子的 ID 两两不同</strong>，采取 HashMap 管理冒险者。然后我们根据所需的操作，在 Bottle 类和 Adventurer 类里面添加方法即可。详细情况可见下图：</p><p><img src="https://miaomiao-1-1319022947.cos.ap-beijing.myqcloud.com/202307101727.png" alt=""></p><h2 id="MainClass"><a href="#MainClass" class="headerlink" title="MainClass"></a>MainClass</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> op; <span class="comment">//操作符，标记是哪个指令</span></span><br><span class="line">        <span class="type">int</span> advId;</span><br><span class="line">        HashMap&lt;Integer, Adventurer&gt; adventurers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            op = scanner.nextInt();</span><br><span class="line">            advId = scanner.nextInt();</span><br><span class="line">            <span class="type">Adventurer</span> <span class="variable">adventurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adventurer</span>();</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                ArrayList&lt;Bottle&gt; bottles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                adventurer.setAdventurer(advId, scanner.next(), bottles);</span><br><span class="line">                adventurers.put(advId, adventurer);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op &gt;= <span class="number">2</span> &amp;&amp; op &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">                adventurer = adventurers.get(advId);</span><br><span class="line">                ReadData.noPrint(op, adventurer, scanner);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op &gt;= <span class="number">6</span> &amp;&amp; op &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">//System.out.print(i+2 + &quot; &quot;);</span></span><br><span class="line">                adventurer = adventurers.get(advId);</span><br><span class="line">                ReadData.opPrint(op, adventurer, scanner);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//System.out.print(i+2 + &quot; &quot;);</span></span><br><span class="line">                adventurer = adventurers.get(advId);</span><br><span class="line">                ReadData.arithPrint(op, adventurer);</span><br><span class="line">            &#125;</span><br><span class="line">            scanner.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bottle-类"><a href="#Bottle-类" class="headerlink" title="Bottle 类"></a>Bottle 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bottle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> filled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getFilled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.filled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">long</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilled</span><span class="params">(<span class="type">boolean</span> filled)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filled = filled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bottle</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">long</span> price, <span class="type">double</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.filled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Adventurer-类"><a href="#Adventurer-类" class="headerlink" title="Adventurer 类"></a>Adventurer 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adventurer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Bottle&gt; bottles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBot</span><span class="params">(<span class="type">int</span> botId, String botName, <span class="type">long</span> botPrice, <span class="type">double</span> botCap)</span> &#123;</span><br><span class="line">        <span class="type">Bottle</span> <span class="variable">bottle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>(botId, botName, botPrice, botCap);</span><br><span class="line">        bottles.add(bottle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBot</span><span class="params">(<span class="type">int</span> botId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                bottles.remove(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modPrice</span><span class="params">(<span class="type">int</span> botId, <span class="type">long</span> botPrice)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                i.setPrice(botPrice);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modFilled</span><span class="params">(<span class="type">int</span> botId, <span class="type">boolean</span> botFilled)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                i.setFilled(botFilled);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkName</span><span class="params">(<span class="type">int</span> botId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                System.out.println(i.getName());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPrice</span><span class="params">(<span class="type">int</span> botId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                System.out.println(i.getPrice());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkCap</span><span class="params">(<span class="type">int</span> botId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                System.out.println(i.getCap());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFilled</span><span class="params">(<span class="type">int</span> botId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                System.out.println(i.getFilled());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">describeBot</span><span class="params">(<span class="type">int</span> botId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getId() == botId) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;The bottle&#x27;s id is &quot;</span> + i.getId());</span><br><span class="line">                System.out.print(<span class="string">&quot;, name is &quot;</span> + i.getName());</span><br><span class="line">                System.out.print(<span class="string">&quot;, capacity is &quot;</span> + i.getCap());</span><br><span class="line">                System.out.println(<span class="string">&quot;, filled is &quot;</span> + i.getFilled() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> BigInteger.valueOf(i.getPrice());</span><br><span class="line">            a = b.add(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">maxPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Bottle i : bottles) &#123;</span><br><span class="line">            b = i.getPrice();</span><br><span class="line">            <span class="keyword">if</span> (b &gt; ans) &#123;</span><br><span class="line">                ans = b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(ans + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdventurer</span><span class="params">(<span class="type">int</span> id, String name, ArrayList&lt;Bottle&gt; bottles)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.bottles = bottles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ReadData"><a href="#ReadData" class="headerlink" title="ReadData"></a>ReadData</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadData</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">noPrint</span><span class="params">(<span class="type">int</span> op, Adventurer adventurer, Scanner scanner)</span> &#123;</span><br><span class="line">        <span class="type">int</span> botId;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                botId = scanner.nextInt();</span><br><span class="line">                adventurer.addBot(botId, scanner.next(), scanner.nextLong(), scanner.nextDouble());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                adventurer.removeBot(scanner.nextInt());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                adventurer.modPrice(scanner.nextInt(), scanner.nextLong());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                adventurer.modFilled(scanner.nextInt(), scanner.nextBoolean());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">opPrint</span><span class="params">(<span class="type">int</span> op, Adventurer adventurer, Scanner scanner)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                adventurer.checkName(scanner.nextInt());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                adventurer.checkPrice(scanner.nextInt());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                adventurer.checkCap(scanner.nextInt());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                adventurer.checkFilled(scanner.nextInt());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                adventurer.describeBot(scanner.nextInt());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arithPrint</span><span class="params">(<span class="type">int</span> op, Adventurer adventurer)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                adventurer.addPrice();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                adventurer.maxPrice();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我养的兔子</title>
      <link href="/post/c789a608.html"/>
      <url>/post/c789a608.html</url>
      
        <content type="html"><![CDATA[<p>首先，我养了一只兔子，叫宅宅。至于这只兔子为什么叫宅宅，因为他的主人是肥宅，所以他光荣拥有了宅宅这一姓名，与主人一起在中国北京海淀的学院路37号过寝室蹲生活。</p><p>如果你还没有养过兔子，那么我建议你养一只，这样就可以看兔子拉屎，并看他吃屎；如果你已经有了一只兔子，那非常好，建议你再养一只，这样就可以看他们吃对方的屎。</p><p>喵喵喵。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宅宅 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
